//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from: CollectUserEquipProto.proto
// Note: requires additional types generated from: UserEquipRepairProto.proto
// Note: requires additional types generated from: FullUserProto.proto
namespace proto
{
  [global::System.Serializable, global::ProtoBuf.ProtoContract(Name=@"CollectUserEquipRequestProto")]
  public partial class CollectUserEquipRequestProto : global::ProtoBuf.IExtensible
  {
    public CollectUserEquipRequestProto() {}
    

    private proto.MinimumUserProto _mup = null;
    [global::ProtoBuf.ProtoMember(1, IsRequired = false, Name=@"mup", DataFormat = global::ProtoBuf.DataFormat.Default)]
    [global::System.ComponentModel.DefaultValue(null)]
    public proto.MinimumUserProto mup
    {
      get { return _mup; }
      set { _mup = value; }
    }
    private readonly global::System.Collections.Generic.List<proto.UserEquipRepairProto> _uerList = new global::System.Collections.Generic.List<proto.UserEquipRepairProto>();
    [global::ProtoBuf.ProtoMember(2, Name=@"uerList", DataFormat = global::ProtoBuf.DataFormat.Default)]
    public global::System.Collections.Generic.List<proto.UserEquipRepairProto> uerList
    {
      get { return _uerList; }
    }
  
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
  [global::System.Serializable, global::ProtoBuf.ProtoContract(Name=@"CollectUserEquipResponseProto")]
  public partial class CollectUserEquipResponseProto : global::ProtoBuf.IExtensible
  {
    public CollectUserEquipResponseProto() {}
    

    private proto.MinimumUserProto _mup = null;
    [global::ProtoBuf.ProtoMember(1, IsRequired = false, Name=@"mup", DataFormat = global::ProtoBuf.DataFormat.Default)]
    [global::System.ComponentModel.DefaultValue(null)]
    public proto.MinimumUserProto mup
    {
      get { return _mup; }
      set { _mup = value; }
    }
    private readonly global::System.Collections.Generic.List<proto.UserEquipRepairProto> _uer2List = new global::System.Collections.Generic.List<proto.UserEquipRepairProto>();
    [global::ProtoBuf.ProtoMember(2, Name=@"uer2List", DataFormat = global::ProtoBuf.DataFormat.Default)]
    public global::System.Collections.Generic.List<proto.UserEquipRepairProto> uer2List
    {
      get { return _uer2List; }
    }
  

    private proto.CollectUserEquipResponseProto.CollectUserEquipStatus _status = proto.CollectUserEquipResponseProto.CollectUserEquipStatus.SUCCESS;
    [global::ProtoBuf.ProtoMember(3, IsRequired = false, Name=@"status", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    [global::System.ComponentModel.DefaultValue(proto.CollectUserEquipResponseProto.CollectUserEquipStatus.SUCCESS)]
    public proto.CollectUserEquipResponseProto.CollectUserEquipStatus status
    {
      get { return _status; }
      set { _status = value; }
    }
    [global::ProtoBuf.ProtoContract(Name=@"CollectUserEquipStatus")]
    public enum CollectUserEquipStatus
    {
            
      [global::ProtoBuf.ProtoEnum(Name=@"SUCCESS", Value=0)]
      SUCCESS = 0,
            
      [global::ProtoBuf.ProtoEnum(Name=@"FAIL_NOT_COMPLETE", Value=1)]
      FAIL_NOT_COMPLETE = 1,
            
      [global::ProtoBuf.ProtoEnum(Name=@"FAIL_OTHER", Value=2)]
      FAIL_OTHER = 2
    }
  
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
}